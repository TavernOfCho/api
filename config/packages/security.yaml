security:
    always_authenticate_before_granting: true
    encoders:
        App\Entity\User: bcrypt

    providers:
        database_users:
            entity: { class: App\Entity\User, property: username }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
       
        login:
            pattern:  ^/login
            stateless: true
            anonymous: true
            json_login:
                check_path:               /login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/
            anonymous: ~
            stateless: true
            guard:
                authenticators:
                - lexik_jwt_authentication.jwt_token_authenticator

            # activate different ways to authenticate
            # http_basic: ~
            # http://symfony.com/doc/current/book/security.html#a-configuring-how-your-users-will-authenticate
            # form_login: ~
            # http://symfony.com/doc/current/cookbook/security/form_login_setup.html

    access_control:
    # Secured part of the site
    # This config requires being logged for the whole site and having the admin role for the admin part.
    # Change these rules to adapt them to your needs
    - { path: ^/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/$, role: IS_AUTHENTICATED_ANONYMOUSLY }
    
    # API specific cases
    - { path: ^/users/security, role: IS_AUTHENTICATED_ANONYMOUSLY, methods:[GET, POST, PUT], host: '%env(SITE_DOMAIN)%' }
    
    # Basic Security
    - { path: ^/, role: IS_AUTHENTICATED_FULLY }
    
